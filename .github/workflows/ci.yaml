name: CI

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

jobs:
  formatting:
    name: formatting
    runs-on: ubuntu-latest
    steps:
    - name: Clone repo
      uses: actions/checkout@v2
    - name: Set up python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: isort
      run: python -m  isort . --check --diff
    - name: black
      run: python -m black --check --diff .
    - name: flake8
      run: python -m flake8 .
    - name: mypy
      run: |
        python -m mypy openmapflow
        python -m mypy tests
        python -m mypy buildings-example/*.py
        python -m mypy crop-mask-example/*.py
        python -m mypy maize-example/*.py

  test:
    name: single-test
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Clone repo
      uses: actions/checkout@v2
    - name: Set up python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Run tests
      run: python -m unittest discover -s tests

  cross-platform-test:
    name: cross-platform-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    env:
      MPLBACKEND: Agg
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: 3.9
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install conda (Windows)
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        channel-priority: strict
      if: ${{ runner.os == 'Windows' }}
    - name: Install conda dependencies (Windows)
      run: |
        conda install 'fiona>=1.5' 'rasterio>=1.2.6'
        pip install -r requirements.txt
      if: ${{ runner.os == 'Windows' }}
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      if: ${{ runner.os != 'Windows' }}
      run: pip install -r requirements.txt
    - name: Run tests (Windows)
      if: ${{ runner.os == 'Windows' }}
      env:
        PROJ_LIB: C:\Miniconda\envs\test\Library\share\proj
        GDAL_DATA: C:\Miniconda\envs\test\Library\share\gdal
      run: python -m unittest discover -s tests
    - name: Run tests
      if: ${{ runner.os != 'Windows' }}
      run: python -m unittest discover -s tests

  publish-to-pypi:
    needs: [formatting, cross-platform-test]
    if: startsWith(github.ref, 'refs/tags')
    name: Publish to PyPI (if tagged)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
        .
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
